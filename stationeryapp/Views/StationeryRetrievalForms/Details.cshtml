@model IEnumerable<stationeryapp.Models.ViewModelRetrieval>

@{
    ViewBag.Title = "Details";
}

<h2>Stationery Retrieval Form</h2>

<table>
    <tr>
        <td>From:</td>
        <td>@ViewData["FromDate"]</td>
    </tr>

    <tr>
        <td>To:</td>
        <td>@ViewData["ToDate"]</td>
    </tr>
</table>

<table class="table" align="center">

    <tr>
        <th rowspan="2">Bin Number</th>
        <th rowspan="2">Stationary Description</th>
        <th colspan="2">Total Quantity</th>
        <th colspan="3">Breakdown by Department</th>
    </tr>

    <tr>
        <th>Needed</th>
        <th>Retrieved</th>
        <th>Department Name</th>
        <th>Needed</th>
        <th>Actual</th>
    </tr>

    @functions{
        public class TempData
        {
            public string departmentName;
            public int needed;
            public int actual;

            public TempData(string dname, int n, int a)
            {
                departmentName = dname;
                needed = n;
                actual = a;
            }
        }

        public class Sums
        {
            public string description;
            public int needed;
            public int actual;

            public Sums(string desc, int n, int a)
            {
                description = desc;
                needed = n;
                actual = a;
            }

            public void addNeeded(int n)
            {
                needed += n;
            }

            public void addActual(int a)
            {
                actual += a;
            }
        }
    }

    @{
        int sum_needed = 0;
        int sum_actual = 0;
        Dictionary<string, List<TempData>> store = new Dictionary<string, List<TempData>>();
        Dictionary<string, Sums> bin_to_sums = new Dictionary<string, Sums>();
        foreach (var item in Model)
        {
            TempData t = new TempData(@item.departmentLists.DepartmentName, (int)@item.retrievalFormDetails.Needed, (int)@item.retrievalFormDetails.Actual);
            Sums s = new Sums(@item.catalogs.Description, (int)@item.retrievalFormDetails.Needed, (int)@item.retrievalFormDetails.Actual);
            if (!store.ContainsKey(@item.catalogs.BinNumber))
            {
                List<TempData> list = new List<TempData>();
                list.Add(t);
                store.Add(@item.catalogs.BinNumber, list);
            }
            else
            {
                store[@item.catalogs.BinNumber].Add(t);
            }

            if (!bin_to_sums.ContainsKey(@item.catalogs.BinNumber))
            {
                bin_to_sums.Add(@item.catalogs.BinNumber, s);
            }
            else
            {
                bin_to_sums[@item.catalogs.BinNumber].addNeeded((int)@item.retrievalFormDetails.Needed);
                bin_to_sums[@item.catalogs.BinNumber].addActual((int)@item.retrievalFormDetails.Actual);
            }
        }

        foreach (var k in store)
        {
            List<TempData> l1 = k.Value;
            <tr>
                <td>@k.Key</td>
                <td>@bin_to_sums[@k.Key].description</td>
                <td>@bin_to_sums[@k.Key].needed</td>
                <td>@bin_to_sums[@k.Key].actual</td>
                <td>@l1[0].departmentName</td>
                <td>@l1[0].needed</td>
                <td>@l1[0].actual</td>
                @for (var i = 1; i < l1.Count; i++)
                {
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>
                        @l1[i].departmentName
                    </td>
                    <td>
                        @l1[i].needed
                    </td>
                    <td>
                        @l1[i].actual
                    </td>
                </tr>
            }
                </tr>
            }
    }

</table>