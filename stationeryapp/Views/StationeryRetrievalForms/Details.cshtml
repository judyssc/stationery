@model List<stationeryapp.Models.RForm>
@using stationeryapp.Util

@{
    ViewBag.Title = "Retrieve";
    string sessionId = (string)ViewData["sessionId"];
    string username = (string)ViewData["username"];
}

<h2>Stationery Retrieval Form</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.Hidden("sessionId", sessionId)
    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <table id="details" class="table" align="center">

            <tr>
                <th rowspan="2">
                    @Html.DisplayNameFor(model => model[0].BinNumber)
                </th>
                <th rowspan="2">
                    @Html.DisplayNameFor(model => model[0].Description)
                </th>
                <th colspan="2">
                    Total Quantity
                </th>
                <th colspan="3">Breakdown by Department</th>
            </tr>

            <tr>
                <th>Needed</th>
                <th>Retrieved</th>
                <th>Department Name</th>
                <th>@Html.DisplayNameFor(model => model[0].stationeryRetrievalFormDetail.Needed)</th>
                <th>@Html.DisplayNameFor(model => model[0].stationeryRetrievalFormDetail.Actual)</th>
            </tr>

            @for (int i = 0; i < Model.Count; i++)
            {
                @Html.HiddenFor(model => model[i].stationeryRetrievalFormDetail.FormNumber)
                @Html.HiddenFor(model => model[i].stationeryRetrievalFormDetail.FormDetailsNumber)
                @Html.HiddenFor(model => model[i].stationeryRetrievalFormDetail.ItemNumber)
                @Html.HiddenFor(model => model[i].stationeryRetrievalFormDetail.DepartmentCode)
                <tr>
                    @if (i == 0 || Model[i].Description != Model[i - 1].Description)
                    {
                        <td>@Html.DisplayTextFor(model => model[i].BinNumber)</td>
                        <td>@Html.DisplayTextFor(model => model[i].Description)</td>
                        <td>@Html.TextBox(StringExtension.clean(Model[i].Description) + "Needed", 0, new { @class = "TotalNeeded", @readonly = "readonly" }) </td>
                        <td>@Html.TextBox(StringExtension.clean(Model[i].Description) + "Actual", 0, new { @class = "TotalActual", @readonly = "readonly" })</td>
                        ;
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        ;
                    }
                    <td>@Html.DisplayTextFor(model => model[i].stationeryRetrievalFormDetail.DepartmentCode)</td>
                    <td>@Html.TextBoxFor(model => model[i].stationeryRetrievalFormDetail.Needed, new { @class = StringExtension.clean(Model[i].Description) + "Needed", @readonly = "readonly" })</td>
                    <td>@Html.TextBoxFor(model => model[i].stationeryRetrievalFormDetail.Actual, new { @class = StringExtension.clean(Model[i].Description) + "Actual", @readonly = "readonly" })</td>

                </tr>
            }

        </table>


        @*<div class="form-group" align="right">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Confirm Quantities Retrieved" class="btn btn-default" />
            </div>
        </div>*@
    </div>
}

<script>

    function updateRetrievedTotal(element) {
        var classOfActualTextBox = element.className;
        //console.log(classOfActualTextBox);
        var listActualTotal = document.getElementById("details").querySelectorAll('.'+classOfActualTextBox);
        //console.log(listActualTotal);
        var retrievedTotal = 0;
        for (var i = 0; i < listActualTotal.length; i++) {
            retrievedTotal += parseInt(listActualTotal[i].value);
        }
        //console.log(classOfActualTextBox + "TotalActual");
        //console.log(retrievedTotal);
        var retrievedElement = document.getElementById(classOfActualTextBox);
        //console.log(retrievedElement);
        retrievedElement.value = retrievedTotal;
    }

    function updateNeededTotal() {

        var listNeededTotal = document.getElementById("details").querySelectorAll(".TotalNeeded");

        for (var i = 0; i < listNeededTotal.length; i++) {
            var neededTotalQuantity = 0;
            totalElementId = listNeededTotal[i].id;

            var listDeptNeeded = document.getElementById("details").querySelectorAll('.' + totalElementId);
            for (var j = 0; j < listDeptNeeded.length; j++) {
                neededTotalQuantity += parseInt(listDeptNeeded[j].value);
            }
            listNeededTotal[i].value = neededTotalQuantity;
        }
    }

    function updateActualTotal() {

        var listActualTotal = document.getElementById("details").querySelectorAll(".TotalActual");

        for (var i = 0; i < listActualTotal.length; i++) {
            var actualTotalQuantity = 0;
            totalElementId = listActualTotal[i].id;

            var listDeptNeeded = document.getElementById("details").querySelectorAll('.' + totalElementId);
            for (var j = 0; j < listDeptNeeded.length; j++) {
                actualTotalQuantity += parseInt(listDeptNeeded[j].value);
            }
            listActualTotal[i].value = actualTotalQuantity;
        }
    }

    window.onload = updateNeededTotal(); updateActualTotal();
</script>

<div>
    @Html.ActionLink("Back to List", "Index", new { sessionId = sessionId })
</div>
